1.What are the Conditional Operators in Java?
Conditional Operators are used to work on conditions in Java. They control the flow of a program. Ternary Operator is used in place of if-else, if-elseif and switch-case statements. Ternary Operator enhances the conciseness and readability of code.

2. What are the types of operators based on the number of operands?
Arithmetic operators perform mathematical operations such as addition and subtraction with operands. There are two types of mathematical operators: unary and binary. Unary operators perform an action with a single operand. Binary operators perform actions with two operands.

3.What is the use of Switch case in Java programming?
The switch case in java executes one statement from multiple ones. Thus, it is like an if-else-if ladder statement. It works with a lot of data types. The switch statement is used to test the equality of a variable against several values specified in the test cases.

4.What are the conditional Statements and use of conditional statements in Java?
Conditional statements in Java are used to make decisions based on certain conditions. The most common conditional statements in Java are the If-Else statement, the Switch statement, and the Ternary Operator. These statements allow the program to execute different blocks of code based on specific conditions.

5.What is the syntax of if else statement?
General syntax for if-else statement is: if (Condition) { Statement1; } else { Statement2; } Note: In case of single statement within if and else block, curly braces can be omitted.

6.How do you compare two strings in Java?
There are three ways to compare String in Java:

By Using equals() Method
By Using == Operator
By compareTo() Method

7.What is Mutable String in Java Explain with an example

In Java, a mutable string is a string whose content can be changed without creating a new object. The StringBuffer and StringBuilder classes are mutable versions of the String class.

8.Write a program to sort a String Alphabetically
class StringSorter {

    public static String sortString(String str) {
        char[] chars = str.toCharArray();
        Arrays.sort(chars);
        return new String(chars);
    }

    public static void main(String[] args) {
        String str = "hello world";
        String sortedStr = sortString(str);
        System.out.println(sortedStr); // prints "dehhllorw"
    }
}
9.Write a program to check if the letter 'e' is present in the word**

**'Umbrella'.**

public class CheckLetter {

    public static void main(String[] args) {
        String word = "Umbrella";
        char letter = 'e';

        boolean isPresent = false;
        for (int i = 0; i < word.length(); i++) {
            if (word.charAt(i) == letter) {
                isPresent = true;
                break;
            }
        }

        if (isPresent) {
            System.out.println(letter + " is present in the word " + word);
        } else {
            System.out.println(letter + " is not present in the word " + word);
        }
    }
}
10.Where exactly is the string constant pool located in the**

**memory?**

The string constant pool is located in the heap memory of the Java Virtual Machine (JVM). The heap is a region of memory that is used to store objects that are created by the program. The string constant pool is a special area of the heap that is used to store string literals.

In Java 7 and earlier versions, the string constant pool was located in the PermGen space. The PermGen space is a region of memory that is used to store permanent data, such as class definitions and string literals. However, the PermGen space is a fixed size, so it can be a bottleneck if a program creates a large number of string literals.

In Java 8, the string constant pool was moved to the heap space. This change was made to improve the performance of the JVM and to prevent the PermGen space from becoming a bottleneck.

The string constant pool is a shared resource, which means that all threads in the JVM can access it. This can be a performance benefit, because it means that there is no need to create a new string object every time a string literal is used.

The string constant pool is also a garbage-collected resource, which means that the JVM will automatically remove string literals from the pool when they are no longer needed. This helps to prevent the heap from becoming cluttered with unused string objects.
















